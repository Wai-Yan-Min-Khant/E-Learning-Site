{"id":"gboF","dependencies":[{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\package.json","includedInParent":true,"mtime":1650081464135},{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\package.json","includedInParent":true,"mtime":1650081442282},{"name":"./thumb","loc":{"line":1,"column":31,"index":31},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\track\\track.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\track\\thumb.js"},{"name":"../utils/","loc":{"line":2,"column":26,"index":68},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\track\\track.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\utils\\index.js"}],"generated":{"js":"var $gboF$exports = {};\n$parcel$require(\"gboF\", \"./thumb\");\n$parcel$require(\"gboF\", \"../utils/\");\n\nvar $gboF$export$ScrollbarTrack =\n/** @class */\nfunction () {\n  function ScrollbarTrack(direction, thumbMinSize) {\n    if (thumbMinSize === void 0) {\n      thumbMinSize = 0;\n    }\n    /**\n     * Track element\n     */\n\n\n    this.element = document.createElement('div');\n    this._isShown = false;\n    this.element.className = \"scrollbar-track scrollbar-track-\" + direction;\n    this.thumb = new $gboF$import$ScrollbarThumb(direction, thumbMinSize);\n    this.thumb.attachTo(this.element);\n  }\n  /**\n   * Attach to scrollbar container element\n   *\n   * @param scrollbarContainer Scrollbar container element\n   */\n\n\n  ScrollbarTrack.prototype.attachTo = function (scrollbarContainer) {\n    scrollbarContainer.appendChild(this.element);\n  };\n  /**\n   * Show track immediately\n   */\n\n\n  ScrollbarTrack.prototype.show = function () {\n    if (this._isShown) {\n      return;\n    }\n\n    this._isShown = true;\n    this.element.classList.add('show');\n  };\n  /**\n   * Hide track immediately\n   */\n\n\n  ScrollbarTrack.prototype.hide = function () {\n    if (!this._isShown) {\n      return;\n    }\n\n    this._isShown = false;\n    this.element.classList.remove('show');\n  };\n\n  ScrollbarTrack.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    $gboF$import$setStyle(this.element, {\n      display: pageSize <= containerSize ? 'none' : 'block'\n    });\n    this.thumb.update(scrollOffset, containerSize, pageSize);\n  };\n\n  return ScrollbarTrack;\n}();\n\n$gboF$exports.ScrollbarTrack = $gboF$export$ScrollbarTrack;"},"sourceMaps":null,"error":null,"hash":"0c75ba618a670b92017352c13a0d4cd6","cacheData":{"env":{},"imports":{"$gboF$import$ScrollbarThumb":["./thumb","ScrollbarThumb"],"$gboF$import$setStyle":["../utils/","setStyle"]},"exports":{"ScrollbarTrack":"$gboF$export$ScrollbarTrack"},"wildcards":[],"sideEffects":true,"isES6Module":true}}