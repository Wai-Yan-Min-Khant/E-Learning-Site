{"id":"QLhU","dependencies":[{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\package.json","includedInParent":true,"mtime":1650081464135},{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1650081463614},{"name":"../internals/to-integer-or-infinity","loc":{"line":1,"column":34,"index":34},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\core-js\\internals\\to-absolute-index.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\core-js\\internals\\to-integer-or-infinity.js"}],"generated":{"js":"var $QLhU$exports = {};\nvar $QLhU$var$toIntegerOrInfinity = $parcel$require(\"QLhU\", \"../internals/to-integer-or-infinity\");\nvar $QLhU$var$max = Math.max;\nvar $QLhU$var$min = Math.min; // Helper for a popular repeating case of the spec:\n// Let integer be ? ToInteger(index).\n// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\n\n$QLhU$exports = function (index, length) {\n  var integer = $QLhU$var$toIntegerOrInfinity(index);\n  return integer < 0 ? $QLhU$var$max(integer + length, 0) : $QLhU$var$min(integer, length);\n};"},"sourceMaps":null,"error":null,"hash":"e9902145d557c19024d7ec8faf595689","cacheData":{"env":{},"imports":{"$require$../internals/to-integer-or-infinity":["../internals/to-integer-or-infinity","*"]},"exports":{},"wildcards":[],"sideEffects":true,"isCommonJS":true}}