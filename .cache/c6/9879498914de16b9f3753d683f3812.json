{"id":"wDsK","dependencies":[{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\package.json","includedInParent":true,"mtime":1650081464135},{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\@popperjs\\core\\package.json","includedInParent":true,"mtime":1649764480393},{"name":"./getBoundingClientRect.js","loc":{"line":1,"column":34,"index":34},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\@popperjs\\core\\lib\\dom-utils\\getLayoutRect.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\@popperjs\\core\\lib\\dom-utils\\getBoundingClientRect.js"}],"generated":{"js":"var $wDsK$exports = {};\n$parcel$require(\"wDsK\", \"./getBoundingClientRect.js\");\n\n// Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\nfunction $wDsK$export$default(element) {\n  var clientRect = $wDsK$import$getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}\n\n$wDsK$exports.default = $wDsK$export$default;"},"sourceMaps":null,"error":null,"hash":"e679b2d8ed3fcdd152888f0ac4a8bede","cacheData":{"env":{},"imports":{"$wDsK$import$getBoundingClientRect":["./getBoundingClientRect.js","default"]},"exports":{"default":"$wDsK$export$default"},"wildcards":[],"sideEffects":false,"isES6Module":true,"shouldWrap":false}}