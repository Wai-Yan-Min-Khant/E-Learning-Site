{"id":"CUVd","dependencies":[{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\package.json","includedInParent":true,"mtime":1650081464135},{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\package.json","includedInParent":true,"mtime":1650081442282},{"name":"../utils/","loc":{"line":1,"column":28,"index":28},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\events\\wheel.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\utils\\index.js"}],"generated":{"js":"var $CUVd$exports = {};\n$parcel$require(\"CUVd\", \"../utils/\");\n\nfunction $CUVd$export$wheelHandler(scrollbar) {\n  var addEvent = $CUVd$import$eventScope(scrollbar);\n  var target = scrollbar.options.delegateTo || scrollbar.containerEl;\n  var eventName = 'onwheel' in window || document.implementation.hasFeature('Events.wheel', '3.0') ? 'wheel' : 'mousewheel';\n  addEvent(target, eventName, function (evt) {\n    var _a = $CUVd$var$normalizeDelta(evt),\n        x = _a.x,\n        y = _a.y;\n\n    scrollbar.addTransformableMomentum(x, y, evt, function (willScroll) {\n      if (willScroll) {\n        evt.preventDefault();\n      }\n    });\n  });\n} // Normalizing wheel delta\n\n\n$CUVd$exports.wheelHandler = $CUVd$export$wheelHandler;\nvar $CUVd$var$DELTA_SCALE = {\n  STANDARD: 1,\n  OTHERS: -3\n};\nvar $CUVd$var$DELTA_MODE = [1.0, 28.0, 500.0];\n\nvar $CUVd$var$getDeltaMode = function (mode) {\n  return $CUVd$var$DELTA_MODE[mode] || $CUVd$var$DELTA_MODE[0];\n};\n\nfunction $CUVd$var$normalizeDelta(evt) {\n  if ('deltaX' in evt) {\n    var mode = $CUVd$var$getDeltaMode(evt.deltaMode);\n    return {\n      x: evt.deltaX / $CUVd$var$DELTA_SCALE.STANDARD * mode,\n      y: evt.deltaY / $CUVd$var$DELTA_SCALE.STANDARD * mode\n    };\n  }\n\n  if ('wheelDeltaX' in evt) {\n    return {\n      x: evt.wheelDeltaX / $CUVd$var$DELTA_SCALE.OTHERS,\n      y: evt.wheelDeltaY / $CUVd$var$DELTA_SCALE.OTHERS\n    };\n  } // ie with touchpad\n\n\n  return {\n    x: 0,\n    y: evt.wheelDelta / $CUVd$var$DELTA_SCALE.OTHERS\n  };\n} //# sourceMappingURL=wheel.js.map"},"sourceMaps":null,"error":null,"hash":"9ed9183516a6ec3ab555262e87593a1a","cacheData":{"env":{},"imports":{"$CUVd$import$eventScope":["../utils/","eventScope"]},"exports":{"wheelHandler":"$CUVd$export$wheelHandler"},"wildcards":[],"sideEffects":true,"isES6Module":true}}