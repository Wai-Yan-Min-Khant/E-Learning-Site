{"id":"aW5b","dependencies":[{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\package.json","includedInParent":true,"mtime":1650081464135},{"name":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\package.json","includedInParent":true,"mtime":1650081442282},{"name":"tslib","loc":{"line":1,"column":37,"index":37},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\tslib\\tslib.es6.js"},{"name":"lodash-es/clamp","loc":{"line":2,"column":18,"index":64},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\lodash-es\\clamp.js"},{"name":"./options","loc":{"line":3,"column":24,"index":107},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\options.js"},{"name":"./utils/","loc":{"line":4,"column":41,"index":161},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\utils\\index.js"},{"name":"./decorators/","loc":{"line":5,"column":26,"index":199},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\decorators\\index.js"},{"name":"./track/","loc":{"line":6,"column":33,"index":249},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\track\\index.js"},{"name":"./geometry/","loc":{"line":7,"column":44,"index":305},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\geometry\\index.js"},{"name":"./scrolling/","loc":{"line":8,"column":55,"index":375},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrolling\\index.js"},{"name":"./plugin","loc":{"line":9,"column":29,"index":420},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\plugin.js"},{"name":"./events/","loc":{"line":10,"column":31,"index":463},"parent":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\scrollbar.js","resolved":"C:\\Users\\WAI YAN MIN KHANT\\Desktop\\e-learning template\\node_modules\\smooth-scrollbar\\events\\index.js"}],"generated":{"js":"var $aW5b$exports = {};\n$parcel$require(\"aW5b\", \"tslib\");\n$parcel$require(\"aW5b\", \"lodash-es/clamp\");\n$parcel$require(\"aW5b\", \"./options\");\n$parcel$require(\"aW5b\", \"./utils/\");\n$parcel$require(\"aW5b\", \"./decorators/\");\n$parcel$require(\"aW5b\", \"./track/\");\n$parcel$require(\"aW5b\", \"./geometry/\");\n$parcel$require(\"aW5b\", \"./scrolling/\");\n$parcel$require(\"aW5b\", \"./plugin\");\n$parcel$require(\"aW5b\", \"./events/\");\n// DO NOT use WeakMap here\n// .getAll() methods requires `scrollbarMap.values()`\nvar $aW5b$export$scrollbarMap = new Map();\n$aW5b$exports.scrollbarMap = $aW5b$export$scrollbarMap;\n\nvar $aW5b$export$Scrollbar =\n/** @class */\nfunction () {\n  function Scrollbar(containerEl, options) {\n    var _this = this;\n    /**\n     * Current scrolling offsets\n     */\n\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Max-allowed scrolling offsets\n     */\n\n    this.limit = {\n      x: Infinity,\n      y: Infinity\n    };\n    /**\n     * Container bounding rect\n     */\n\n    this.bounding = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }; // private _observer: ResizeObserver;\n\n    this._plugins = [];\n    this._momentum = {\n      x: 0,\n      y: 0\n    };\n    this._listeners = new Set();\n    this.containerEl = containerEl;\n    var contentEl = this.contentEl = document.createElement('div');\n    this.options = new $aW5b$import$Options(options); // mark as a scroll element\n\n    containerEl.setAttribute('data-scrollbar', 'true'); // make container focusable\n\n    containerEl.setAttribute('tabindex', '-1');\n    $aW5b$import$setStyle(containerEl, {\n      overflow: 'hidden',\n      outline: 'none'\n    }); // enable touch event capturing in IE, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/39\n\n    if (window.navigator.msPointerEnabled) {\n      containerEl.style.msTouchAction = 'none';\n    } // mount content\n\n\n    contentEl.className = 'scroll-content';\n    Array.from(containerEl.childNodes).forEach(function (node) {\n      contentEl.appendChild(node);\n    });\n    containerEl.appendChild(contentEl); // attach track\n\n    this.track = new $aW5b$import$TrackController(this); // initial measuring\n\n    this.size = this.getSize(); // init plugins\n\n    this._plugins = $aW5b$import$initPlugins(this, this.options.plugins); // preserve scroll offset\n\n    var scrollLeft = containerEl.scrollLeft,\n        scrollTop = containerEl.scrollTop;\n    containerEl.scrollLeft = containerEl.scrollTop = 0;\n    this.setPosition(scrollLeft, scrollTop, {\n      withoutCallbacks: true\n    }); // FIXME: update typescript\n\n    var ResizeObserver = window.ResizeObserver; // observe\n\n    if (typeof ResizeObserver === 'function') {\n      this._observer = new ResizeObserver(function () {\n        _this.update();\n      });\n\n      this._observer.observe(contentEl);\n    }\n\n    $aW5b$export$scrollbarMap.set(containerEl, this); // wait for DOM ready\n\n    requestAnimationFrame(function () {\n      _this._init();\n    });\n  }\n\n  Object.defineProperty(Scrollbar.prototype, \"parent\", {\n    /**\n     * Parent scrollbar\n     */\n    get: function () {\n      var elem = this.containerEl.parentElement;\n\n      while (elem) {\n        var parentScrollbar = $aW5b$export$scrollbarMap.get(elem);\n\n        if (parentScrollbar) {\n          return parentScrollbar;\n        }\n\n        elem = elem.parentElement;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollTop\", {\n    /**\n     * Gets or sets `scrollbar.offset.y`\n     */\n    get: function () {\n      return this.offset.y;\n    },\n    set: function (y) {\n      this.setPosition(this.scrollLeft, y);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scrollbar.prototype, \"scrollLeft\", {\n    /**\n     * Gets or sets `scrollbar.offset.x`\n     */\n    get: function () {\n      return this.offset.x;\n    },\n    set: function (x) {\n      this.setPosition(x, this.scrollTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns the size of the scrollbar container element\n   * and the content wrapper element\n   */\n\n  Scrollbar.prototype.getSize = function () {\n    return $aW5b$import$getSize(this);\n  };\n  /**\n   * Forces scrollbar to update geometry infomation.\n   *\n   * By default, scrollbars are automatically updated with `100ms` debounce (or `MutationObserver` fires).\n   * You can call this method to force an update when you modified contents\n   */\n\n\n  Scrollbar.prototype.update = function () {\n    $aW5b$import$update(this);\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onUpdate();\n    });\n  };\n  /**\n   * Checks if an element is visible in the current view area\n   */\n\n\n  Scrollbar.prototype.isVisible = function (elem) {\n    return $aW5b$import$isVisible(this, elem);\n  };\n  /**\n   * Sets the scrollbar to the given offset without easing\n   */\n\n\n  Scrollbar.prototype.setPosition = function (x, y, options) {\n    var _this = this;\n\n    if (x === void 0) {\n      x = this.offset.x;\n    }\n\n    if (y === void 0) {\n      y = this.offset.y;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var status = $aW5b$import$setPosition(this, x, y);\n\n    if (!status || options.withoutCallbacks) {\n      return;\n    }\n\n    this._listeners.forEach(function (fn) {\n      fn.call(_this, status);\n    });\n  };\n  /**\n   * Scrolls to given position with easing function\n   */\n\n\n  Scrollbar.prototype.scrollTo = function (x, y, duration, options) {\n    if (x === void 0) {\n      x = this.offset.x;\n    }\n\n    if (y === void 0) {\n      y = this.offset.y;\n    }\n\n    if (duration === void 0) {\n      duration = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    $aW5b$import$scrollTo(this, x, y, duration, options);\n  };\n  /**\n   * Scrolls the target element into visible area of scrollbar,\n   * likes the DOM method `element.scrollIntoView().\n   */\n\n\n  Scrollbar.prototype.scrollIntoView = function (elem, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    $aW5b$import$scrollIntoView(this, elem, options);\n  };\n  /**\n   * Adds scrolling listener\n   */\n\n\n  Scrollbar.prototype.addListener = function (fn) {\n    if (typeof fn !== 'function') {\n      throw new TypeError('[smooth-scrollbar] scrolling listener should be a function');\n    }\n\n    this._listeners.add(fn);\n  };\n  /**\n   * Removes listener previously registered with `scrollbar.addListener()`\n   */\n\n\n  Scrollbar.prototype.removeListener = function (fn) {\n    this._listeners.delete(fn);\n  };\n  /**\n   * Adds momentum and applys delta transformers.\n   */\n\n\n  Scrollbar.prototype.addTransformableMomentum = function (x, y, fromEvent, callback) {\n    this._updateDebounced();\n\n    var finalDelta = this._plugins.reduce(function (delta, plugin) {\n      return plugin.transformDelta(delta, fromEvent) || delta;\n    }, {\n      x: x,\n      y: y\n    });\n\n    var willScroll = !this._shouldPropagateMomentum(finalDelta.x, finalDelta.y);\n\n    if (willScroll) {\n      this.addMomentum(finalDelta.x, finalDelta.y);\n    }\n\n    if (callback) {\n      callback.call(this, willScroll);\n    }\n  };\n  /**\n   * Increases scrollbar's momentum\n   */\n\n\n  Scrollbar.prototype.addMomentum = function (x, y) {\n    this.setMomentum(this._momentum.x + x, this._momentum.y + y);\n  };\n  /**\n   * Sets scrollbar's momentum to given value\n   */\n\n\n  Scrollbar.prototype.setMomentum = function (x, y) {\n    if (this.limit.x === 0) {\n      x = 0;\n    }\n\n    if (this.limit.y === 0) {\n      y = 0;\n    }\n\n    if (this.options.renderByPixels) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n\n    this._momentum.x = x;\n    this._momentum.y = y;\n  };\n  /**\n   * Update options for specific plugin\n   *\n   * @param pluginName Name of the plugin\n   * @param [options] An object includes the properties that you want to update\n   */\n\n\n  Scrollbar.prototype.updatePluginOptions = function (pluginName, options) {\n    this._plugins.forEach(function (plugin) {\n      if (plugin.name === pluginName) {\n        Object.assign(plugin.options, options);\n      }\n    });\n  };\n\n  Scrollbar.prototype.destroy = function () {\n    var _a = this,\n        containerEl = _a.containerEl,\n        contentEl = _a.contentEl;\n\n    $aW5b$import$clearEventsOn(this);\n\n    this._listeners.clear();\n\n    this.setMomentum(0, 0);\n    cancelAnimationFrame(this._renderID);\n\n    if (this._observer) {\n      this._observer.disconnect();\n    }\n\n    $aW5b$export$scrollbarMap.delete(this.containerEl); // restore contents\n\n    var childNodes = Array.from(contentEl.childNodes);\n\n    while (containerEl.firstChild) {\n      containerEl.removeChild(containerEl.firstChild);\n    }\n\n    childNodes.forEach(function (el) {\n      containerEl.appendChild(el);\n    }); // reset scroll position\n\n    $aW5b$import$setStyle(containerEl, {\n      overflow: ''\n    });\n    containerEl.scrollTop = this.scrollTop;\n    containerEl.scrollLeft = this.scrollLeft; // invoke plugin.onDestroy\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onDestroy();\n    });\n\n    this._plugins.length = 0;\n  };\n\n  Scrollbar.prototype._init = function () {\n    var _this = this;\n\n    this.update(); // init evet handlers\n\n    Object.keys($aW5b$import$eventHandlers).forEach(function (prop) {\n      $aW5b$import$eventHandlers[prop](_this);\n    }); // invoke `plugin.onInit`\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onInit();\n    });\n\n    this._render();\n  };\n\n  Scrollbar.prototype._updateDebounced = function () {\n    this.update();\n  }; // check whether to propagate monmentum to parent scrollbar\n  // the following situations are considered as `true`:\n  //         1. continuous scrolling is enabled (automatically disabled when overscroll is enabled)\n  //         2. scrollbar reaches one side and is not about to scroll on the other direction\n\n\n  Scrollbar.prototype._shouldPropagateMomentum = function (deltaX, deltaY) {\n    if (deltaX === void 0) {\n      deltaX = 0;\n    }\n\n    if (deltaY === void 0) {\n      deltaY = 0;\n    }\n\n    var _a = this,\n        options = _a.options,\n        offset = _a.offset,\n        limit = _a.limit;\n\n    if (!options.continuousScrolling) return false; // force an update when scrollbar is \"unscrollable\", see #106\n\n    if (limit.x === 0 && limit.y === 0) {\n      this._updateDebounced();\n    }\n\n    var destX = $aW5b$import$clamp(deltaX + offset.x, 0, limit.x);\n    var destY = $aW5b$import$clamp(deltaY + offset.y, 0, limit.y);\n    var res = true; // offsets are not about to change\n    // `&=` operator is not allowed for boolean types\n\n    res = res && destX === offset.x;\n    res = res && destY === offset.y; // current offsets are on the edge\n\n    res = res && (offset.x === limit.x || offset.x === 0 || offset.y === limit.y || offset.y === 0);\n    return res;\n  };\n\n  Scrollbar.prototype._render = function () {\n    var _momentum = this._momentum;\n\n    if (_momentum.x || _momentum.y) {\n      var nextX = this._nextTick('x');\n\n      var nextY = this._nextTick('y');\n\n      _momentum.x = nextX.momentum;\n      _momentum.y = nextY.momentum;\n      this.setPosition(nextX.position, nextY.position);\n    }\n\n    var remain = $aW5b$import$__assign({}, this._momentum);\n\n    this._plugins.forEach(function (plugin) {\n      plugin.onRender(remain);\n    });\n\n    this._renderID = requestAnimationFrame(this._render.bind(this));\n  };\n\n  Scrollbar.prototype._nextTick = function (direction) {\n    var _a = this,\n        options = _a.options,\n        offset = _a.offset,\n        _momentum = _a._momentum;\n\n    var current = offset[direction];\n    var remain = _momentum[direction];\n\n    if (Math.abs(remain) <= 0.1) {\n      return {\n        momentum: 0,\n        position: current + remain\n      };\n    }\n\n    var nextMomentum = remain * (1 - options.damping);\n\n    if (options.renderByPixels) {\n      nextMomentum |= 0;\n    }\n\n    return {\n      momentum: nextMomentum,\n      position: current + remain - nextMomentum\n    };\n  };\n\n  $aW5b$import$__decorate([$aW5b$import$debounce(100, {\n    leading: true\n  })], Scrollbar.prototype, \"_updateDebounced\", null);\n  return Scrollbar;\n}();\n\n$aW5b$exports.Scrollbar = $aW5b$export$Scrollbar;"},"sourceMaps":null,"error":null,"hash":"923924dd89fb111d831d3408225e3f5c","cacheData":{"env":{},"imports":{"$aW5b$import$__assign":["tslib","__assign"],"$aW5b$import$__decorate":["tslib","__decorate"],"$aW5b$import$clamp":["lodash-es/clamp","default"],"$aW5b$import$Options":["./options","Options"],"$aW5b$import$setStyle":["./utils/","setStyle"],"$aW5b$import$clearEventsOn":["./utils/","clearEventsOn"],"$aW5b$import$debounce":["./decorators/","debounce"],"$aW5b$import$TrackController":["./track/","TrackController"],"$aW5b$import$getSize":["./geometry/","getSize"],"$aW5b$import$update":["./geometry/","update"],"$aW5b$import$isVisible":["./geometry/","isVisible"],"$aW5b$import$scrollTo":["./scrolling/","scrollTo"],"$aW5b$import$setPosition":["./scrolling/","setPosition"],"$aW5b$import$scrollIntoView":["./scrolling/","scrollIntoView"],"$aW5b$import$initPlugins":["./plugin","initPlugins"],"$aW5b$import$eventHandlers":["./events/","*"]},"exports":{"scrollbarMap":"$aW5b$export$scrollbarMap","Scrollbar":"$aW5b$export$Scrollbar"},"wildcards":[],"sideEffects":true,"isES6Module":true}}